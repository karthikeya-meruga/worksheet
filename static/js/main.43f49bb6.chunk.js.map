{"version":3,"sources":["components/Problem.js","components/Answer.js","components/Layout.js","serviceWorker.js","index.js"],"names":["Problem","props","console","log","answer","useState","active","setActive","num1","Math","floor","random","num2","fixed","sign1","sign2","eval","className","type","placeholder","Answer","onClick","event","Layout","list","i","push","myNum","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+vBAIA,SAASA,QAAQC,OACbC,QAAQC,IAAIF,OACZ,IAAIG,OAAS,EAFM,UAISC,qDAAS,GAJlB,sNAIZC,OAJY,cAIJC,UAJI,cAMbC,KAAOC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GACzCC,KAAOH,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GACzCE,MAAQZ,MAAMY,MACdC,MAAQL,KAAKC,MAAuB,EAAhBD,KAAKE,UAAiB,IAAM,IAChDI,MAAQN,KAAKC,MAAuB,EAAhBD,KAAKE,UAAiB,IAAM,IAGtD,OAFAP,OAASY,KAAK,GAAD,OAAIR,KAAJ,YAAYM,MAAZ,YAAqBF,KAArB,YAA6BG,MAA7B,YAAsCF,MAAtC,MAGT,kEAAKI,UAAU,qBACX,qEAAKT,MACL,qEAAKM,MAAOF,MACZ,qEAAKG,MAAOF,OACZ,qEAAI,oEAAOK,KAAK,OAAOC,YAAY,YACnC,2DAAC,uCAAD,CAAQf,OAAQA,UAUbJ,+B,wDCfAoB,IAhBA,SAAC,GAAc,IAAbhB,EAAY,EAAZA,OAAY,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAOzB,OACI,yBAAKU,UAAU,mBAAmBI,QAAS,SAAAC,GAJ3Cf,GAAWD,KAOVA,EAASF,EAAS,iB,wLCGZmB,MAZf,SAAgBtB,GAEZ,IADA,IAAMuB,EAAO,GACJC,EAAE,EAAEA,EAAE,GAAGA,IACdD,EAAKE,KAAK,kBAAC1B,EAAA,EAAD,CAASa,MAAOZ,EAAM0B,SAEpC,OACI,yBAAKV,UAAU,QACVO,ICCOI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,CAAQP,MAAM,MACdQ,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.43f49bb6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Answer from './Answer'\nimport './styles/Problem.css'\n\nfunction Problem(props){\n    console.log(props)\n    let answer = 0;\n\n    const [active, setActive] = useState(false)\n\n    const num1 = Math.floor((Math.random() * 10) + 1);\n    const num2 = Math.floor((Math.random() * 10) + 1);\n    const fixed = props.fixed;\n    const sign1 = Math.floor((Math.random() * 2)) ? '+' : '-';\n    const sign2 = Math.floor((Math.random() * 2)) ? '+' : '-';\n    answer = eval(`${num1} ${sign1} ${num2} ${sign2} ${fixed} `);\n\n    return(\n        <div className='problem-container'>\n            <h4>{num1}</h4>\n            <h4>{sign1}{num2}</h4>\n            <h4>{sign2}{fixed}</h4>\n            <h4><input type='text' placeholder='Answer' /></h4>\n            <Answer answer={answer}/>\n            {/* THIS WOULDN'T WORK AS CHANGING STATE HERE RELOADS THE COMPONENT AND HENCE CHANGES THE PROBLEM TOO\n            <div>\n                <button onClick={(event)=>setActive(!active)}>{(active)? 'Hide Answer' : 'Show answer'}</button>\n                <h4>{answer}</h4>\n            </div> */}\n        </div>\n    )\n}\n\nexport default Problem","import React, { useState } from 'react'\n\nconst Answer = ({answer}) => {\n    const [active, setActive] = useState(false)\n\n    const handleCLick = () => {\n        setActive(!active)\n    }\n\n    return(\n        <div className='answer-container' onClick={event => handleCLick()}>\n        {/* <button className='answer-element' onClick={(event)=>setActive(!active)}>{(active)? 'Hide Answer' : 'Show answer'}</button>\n        <h4 className='answer-element'>{(active) ? answer : ''}</h4> */}\n        {active ? answer : 'Show Answer'}\n        </div>\n    )\n}\n\nexport default Answer","import React from 'react';\nimport Problem from './Problem';\nimport './styles/Layout.css'\n\nfunction Layout(props) {\n    const list = []\n    for( var i=0;i<20;i++){\n        list.push(<Problem fixed={props.myNum} />);\n    }\n    return (\n        <div className='page'>\n            {list}\n        </div>\n    )\n}\n\nexport default Layout;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Layout from './components/Layout'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Layout myNum='8'/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}